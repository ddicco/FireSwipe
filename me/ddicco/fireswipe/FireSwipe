package me.ddicco.fireswipe;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.util.Vector;

import com.projectkorra.projectkorra.GeneralMethods;
import com.projectkorra.projectkorra.ProjectKorra;
import com.projectkorra.projectkorra.ability.AddonAbility;
import com.projectkorra.projectkorra.ability.FireAbility;
import com.projectkorra.projectkorra.util.ParticleEffect;

public class FireSwipe extends FireAbility implements AddonAbility {
	
	private Random rand = new Random();
	private ArrayList<Integer> angles = new ArrayList<Integer>();
	private double damage;
	private double range;
	private double range1;
	private double range2;
	private double speed;
	private Location startlocation;
	private Location location;
	private Vector direction;
	private Map<Integer, Vector> directions = new HashMap<>();
	private ArrayList<Location> locationarray = new ArrayList<Location>();
	private Map<Integer, ArrayList<Location>> locations1 = new HashMap<>();
	private Map<Integer, ArrayList<Location>> locations2 = new HashMap<>();
	private int arc;
	private int particles;
	private double stepSize;
	private long cooldown;

	public FireSwipe(Player player) {
		super(player);
		// TODO Auto-generated constructor stub
		
		startlocation = player.getEyeLocation();
		particles = 5;
		arc = 16;
		stepSize = 3;
		cooldown = 3000;
		damage = 3;
		speed = 25 * (ProjectKorra.time_step / 1000.0);
		range = 8;
		range1 = range/2;
		
		if(!bPlayer.canBend(this)) {
			remove();
			return;
		}
		
		setFields();
		
		start();
	}
	
	@SuppressWarnings("unchecked")
	public void setFields() {
		bPlayer.addCooldown(this);
		startlocation = this.player.getEyeLocation();
		location = startlocation;
		for(int i = -arc; i <= arc; i += stepSize) {
			Vector direction = startlocation.getDirection().clone();
			direction = GeneralMethods.rotateXZ(direction.clone(), i);
			angles.add(i);
			directions.put(i, direction);
		}
		
		for(int angle : directions.keySet()) {
			Vector direction = directions.get(angle);
			while (location.distanceSquared(startlocation) <= range1 * range1) {
				location = location.clone().add(direction.multiply(speed));
				locationarray.add(location);
			}
			locations1.put(angle, (ArrayList<Location>) locationarray.clone());
			locationarray.clear();
		}
	}

	@Override
	public long getCooldown() {
		// TODO Auto-generated method stub
		return cooldown;
	}
	
	@Override
	public Location getLocation() {
		// TODO Auto-generated method stub
		return player.getLocation();
	}

	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return "FireSwipe";
	}

	@Override
	public boolean isHarmlessAbility() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isSneakAbility() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void progress() {
		// TODO Auto-generated method stub
		if(!bPlayer.canBendIgnoreBindsCooldowns(this)) {
			remove();
			return;
		}
		
		if(!player.isOnline() || player.isDead()) {
			remove();
			return;
		}
		int random = rand.nextInt(angles.size());
		int angle = angles.get(random);
		ArrayList<Location> loc1 = locations1.get(angle);
		for(Location location : loc1) {
			ParticleEffect.CLOUD.display(location, 0, 0, 0, 0, particles);
		}
		
		angles.remove(angles.indexOf(angle));
		locations1.remove(angle);
		if(locations1.isEmpty() || angles.isEmpty()) {
			remove();
			return;
		}
	}
	
	@Override
	public void remove() {
		bPlayer.addCooldown(this);
		super.remove();
		return;
	}

	@Override
	public String getAuthor() {
		// TODO Auto-generated method stub
		return "ddicco";
	}

	@Override
	public String getVersion() {
		// TODO Auto-generated method stub
		return "0.0.1";
	}

	@Override
	public void load() {
		// TODO Auto-generated method stub
		ProjectKorra.plugin.getServer().getPluginManager().registerEvents(new FireSwipeListener(), ProjectKorra.plugin);
		ProjectKorra.log.info("Successfully enabled " + getName() + " by " + getAuthor() + " Version " + getVersion());
		
	}
	
	@Override
	public void stop() {
		// TODO Auto-generated method stub
		
	}
}
